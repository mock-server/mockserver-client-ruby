=begin
#MockServer API

#MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS with clients written in Java, JavaScript and Ruby and a simple REST API (as shown below).  MockServer Proxy is a proxy that introspects all proxied traffic including encrypted SSL traffic and supports Port Forwarding, Web Proxying (i.e. HTTP proxy), HTTPS Tunneling Proxying (using HTTP CONNECT) and SOCKS Proxying (i.e. dynamic port forwarding).  Both MockServer and the MockServer Proxy record all received requests so that it is possible to verify exactly what requests have been sent by the system under test.

The version of the OpenAPI document: 5.13.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module MockServer
  class VerifyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # verify a request has been received a specific number of times
    # @param verification [Verification] request matcher and the number of times to match
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mockserver_verify_put(verification, opts = {})
      mockserver_verify_put_with_http_info(verification, opts)
      nil
    end

    # verify a request has been received a specific number of times
    # @param verification [Verification] request matcher and the number of times to match
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mockserver_verify_put_with_http_info(verification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VerifyApi.mockserver_verify_put ...'
      end
      # verify the required parameter 'verification' is set
      if @api_client.config.client_side_validation && verification.nil?
        fail ArgumentError, "Missing the required parameter 'verification' when calling VerifyApi.mockserver_verify_put"
      end
      # resource path
      local_var_path = '/mockserver/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verification)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VerifyApi.mockserver_verify_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VerifyApi#mockserver_verify_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # verify a sequence of request has been received in the specific order
    # @param verification_sequence [VerificationSequence] the sequence of requests matchers
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mockserver_verify_sequence_put(verification_sequence, opts = {})
      mockserver_verify_sequence_put_with_http_info(verification_sequence, opts)
      nil
    end

    # verify a sequence of request has been received in the specific order
    # @param verification_sequence [VerificationSequence] the sequence of requests matchers
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mockserver_verify_sequence_put_with_http_info(verification_sequence, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VerifyApi.mockserver_verify_sequence_put ...'
      end
      # verify the required parameter 'verification_sequence' is set
      if @api_client.config.client_side_validation && verification_sequence.nil?
        fail ArgumentError, "Missing the required parameter 'verification_sequence' when calling VerifyApi.mockserver_verify_sequence_put"
      end
      # resource path
      local_var_path = '/mockserver/verifySequence'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verification_sequence)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"VerifyApi.mockserver_verify_sequence_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VerifyApi#mockserver_verify_sequence_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
