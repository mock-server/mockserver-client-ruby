=begin
#MockServer API

#MockServer enables easy mocking of any system you integrate with via HTTP or HTTPS with clients written in Java, JavaScript and Ruby and a simple REST API (as shown below).  MockServer Proxy is a proxy that introspects all proxied traffic including encrypted SSL traffic and supports Port Forwarding, Web Proxying (i.e. HTTP proxy), HTTPS Tunneling Proxying (using HTTP CONNECT) and SOCKS Proxying (i.e. dynamic port forwarding).  Both MockServer and the MockServer Proxy record all received requests so that it is possible to verify exactly what requests have been sent by the system under test.

The version of the OpenAPI document: 5.13.2

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module MockServer
  class ControlApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # bind additional listening ports
    # only supported on Netty version
    # @param ports [Ports] list of ports to bind to, where 0 indicates dynamically bind to any available port
    # @param [Hash] opts the optional parameters
    # @return [Ports]
    def mockserver_bind_put(ports, opts = {})
      data, _status_code, _headers = mockserver_bind_put_with_http_info(ports, opts)
      data
    end

    # bind additional listening ports
    # only supported on Netty version
    # @param ports [Ports] list of ports to bind to, where 0 indicates dynamically bind to any available port
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ports, Integer, Hash)>] Ports data, response status code and response headers
    def mockserver_bind_put_with_http_info(ports, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlApi.mockserver_bind_put ...'
      end
      # verify the required parameter 'ports' is set
      if @api_client.config.client_side_validation && ports.nil?
        fail ArgumentError, "Missing the required parameter 'ports' when calling ControlApi.mockserver_bind_put"
      end
      # resource path
      local_var_path = '/mockserver/bind'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ports)

      # return_type
      return_type = opts[:debug_return_type] || 'Ports'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ControlApi.mockserver_bind_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlApi#mockserver_bind_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # clears expectations and recorded requests that match the request matcher
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type request used to match expectations and recored requests to clear
    # @return [nil]
    def mockserver_clear_put(opts = {})
      mockserver_clear_put_with_http_info(opts)
      nil
    end

    # clears expectations and recorded requests that match the request matcher
    # @param [Hash] opts the optional parameters
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type request used to match expectations and recored requests to clear
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mockserver_clear_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlApi.mockserver_clear_put ...'
      end
      # resource path
      local_var_path = '/mockserver/clear'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ControlApi.mockserver_clear_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlApi#mockserver_clear_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # clears all expectations and recorded requests
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mockserver_reset_put(opts = {})
      mockserver_reset_put_with_http_info(opts)
      nil
    end

    # clears all expectations and recorded requests
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mockserver_reset_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlApi.mockserver_reset_put ...'
      end
      # resource path
      local_var_path = '/mockserver/reset'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ControlApi.mockserver_reset_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlApi#mockserver_reset_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # retrieve recorded requests, active expectations, recorded expectations or log messages
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format changes response format, default if not specificed is \&quot;json\&quot;, supported values are \&quot;java\&quot;, \&quot;json\&quot;, \&quot;log_entries\&quot;
    # @option opts [String] :type specifies the type of object that is retrieve, default if not specified is \&quot;requests\&quot;, supported values are \&quot;logs\&quot;, \&quot;requests\&quot;, \&quot;recorded_expectations\&quot;, \&quot;active_expectations\&quot;
    # @option opts [RequestDefinition] :request_definition request used to match which recorded requests, expectations or log messages to return, an empty body matches all requests, expectations or log messages
    # @return [OneOfarrayarray]
    def mockserver_retrieve_put(opts = {})
      data, _status_code, _headers = mockserver_retrieve_put_with_http_info(opts)
      data
    end

    # retrieve recorded requests, active expectations, recorded expectations or log messages
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format changes response format, default if not specificed is \&quot;json\&quot;, supported values are \&quot;java\&quot;, \&quot;json\&quot;, \&quot;log_entries\&quot;
    # @option opts [String] :type specifies the type of object that is retrieve, default if not specified is \&quot;requests\&quot;, supported values are \&quot;logs\&quot;, \&quot;requests\&quot;, \&quot;recorded_expectations\&quot;, \&quot;active_expectations\&quot;
    # @option opts [RequestDefinition] :request_definition request used to match which recorded requests, expectations or log messages to return, an empty body matches all requests, expectations or log messages
    # @return [Array<(OneOfarrayarray, Integer, Hash)>] OneOfarrayarray data, response status code and response headers
    def mockserver_retrieve_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlApi.mockserver_retrieve_put ...'
      end
      allowable_values = ["java", "json", "log_entries"]
      if @api_client.config.client_side_validation && opts[:'format'] && !allowable_values.include?(opts[:'format'])
        fail ArgumentError, "invalid value for \"format\", must be one of #{allowable_values}"
      end
      allowable_values = ["logs", "requests", "request_responses", "recorded_expectations", "active_expectations"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/mockserver/retrieve'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/java', 'text/plain'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_definition'])

      # return_type
      return_type = opts[:debug_return_type] || 'OneOfarrayarray'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ControlApi.mockserver_retrieve_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlApi#mockserver_retrieve_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # return listening ports
    # @param [Hash] opts the optional parameters
    # @return [Ports]
    def mockserver_status_put(opts = {})
      data, _status_code, _headers = mockserver_status_put_with_http_info(opts)
      data
    end

    # return listening ports
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ports, Integer, Hash)>] Ports data, response status code and response headers
    def mockserver_status_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlApi.mockserver_status_put ...'
      end
      # resource path
      local_var_path = '/mockserver/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Ports'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ControlApi.mockserver_status_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlApi#mockserver_status_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # stop running process
    # only supported on Netty version
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mockserver_stop_put(opts = {})
      mockserver_stop_put_with_http_info(opts)
      nil
    end

    # stop running process
    # only supported on Netty version
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def mockserver_stop_put_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlApi.mockserver_stop_put ...'
      end
      # resource path
      local_var_path = '/mockserver/stop'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"ControlApi.mockserver_stop_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlApi#mockserver_stop_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
